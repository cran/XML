<article xmlns:r="http://www.r-project.org">
<title>An Article</title>
<section>
<title>First section</title>
<para>
We use this text to illustrate how to switch between
internal and R-level nodes when dealing with XML in R.
We read this into R via <r:func>xmlTreeParse</r:func>
and then convert it to internal nodes for use
with XPath via <r:func pkg="XML">getNodeSet</r:func>and then convert the nodes to 
R-level nodes.
</para>
<para>
In many respects, it is easier to use internal nodes
and then convert the results to R-level nodes if one wants
to use these outside of the context of the document.
</para>
<para>
Of course, all of this is to get around the problem 
of working with nodes after the document has been garbage
collected. We can fix this problem to avoid releasing
the document until all the extracted nodes assigned to R
objects are garbage collected also, or
by extracting them from the original document and cloning the nodes
to be "free-standing".
</para>
<para>
Here is an example of a complex node we might want to extract
<r:code>
  2:4
  <r:output><![CDATA[
    [1]  2  3 4
  ]]></r:output>
</r:code>
</para>
<para>
The basic idea is that we can go from an internal 
node to a regular R-level node very simply.
<r:code>
node = getNodeSet(doc, "//r:code")[[1]]
xmlRoot(xmlTreeParse(saveXML(node)))
</r:code>
There is an issue with namespace definitions that
are "higher up" the tree.
</para>
</section>
</article>
