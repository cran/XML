# An input file for autoconf to configure 
# the XML parsing facilities for both R and S.
# Currently this works for R.
#
# This was implemented by Friedrich Leisch
# with some modifications for the next version
# by Duncan Temple Lang.
#

AC_INIT(DESCRIPTION)


AC_ARG_WITH(oldlibxml,[], USE_OLD_ROOT_CHILD_NAMES=1; FORCE_OLD=1;echo "Using old libxml names")
AC_ARG_WITH(libxml2,[--with-libxml2    indicate that the libxml version is 2.0 or higher],
               [ if test "${withval}" = yes; then
                    LIBXML2="-DLIBXML2=1";
                 fi])

AC_ARG_WITH(libxml,
  [  --with-libxml           use libxml library],
  [ if test "${withval}" = no; then
      USE_LIBXML=false;
    else
      USE_LIBXML=true;
    fi],
  USE_LIBXML=true)

# Default is false for expat since we can 
# do event driven parsing with libxml.
AC_ARG_WITH(expat,
  [  --with-expat            use expat library],
  [ if test "${withval}" = no; then
      USE_EXPAT= ;
    else
      USE_EXPAT=true;
    fi],
  USE_EXPAT= )


AC_PROG_CC
AC_PROG_CPP


dnl In this section, we try to find the different
dnl characteristics of the libxml library.

dnl Whether it is 

if test -n "${USE_LIBXML}" ; then

    dnl If the user has specified LIBXML_INCDIR, then
    dnl we use that. Otherwise, we try to find the parser.h file.
    
#  if test -z "${LIBXML_INCDIR}" ; then
    TMP_CPPFLAGS=${CPPFLAGS}
    for dir in ${LIBXML_INCDIR} /usr/include /usr/local/include ; do

       CPPFLAGS="${TMP_CPPFLAGS} -I${dir}/gnome-xml"
       AC_CHECK_HEADER(gnome-xml/parser.h, FROM_GNOME_XML_DIR=1)
       if test -n "${FROM_GNOME_XML_DIR}" ; then
         PKG_CPPFLAGS="${PKG_CPPFLAGS} -DFROM_GNOME_XML_DIR=1"
         CPPFLAGS="${CPPFLAGS} -DFROM_GNOME_XML_DIR=1"
         LIBXML_INCDIR="${dir}"
echo "I got the gnome-xml parser in $dir"
         break
       fi
    done
   if test -z "${FROM_GNOME_XML_DIR}" ; then
    CPPFLAGS=${TMP_CPPFLAGS}
   fi
#  fi    # end of -z LIBXML_INCDIR


  if test -z "${LIBXML_INCDIR}"; then
    AC_CHECK_HEADER(libxml/parser.h, LIBXML_INCDIR="libxml/")
  fi
  if test -z "${LIBXML_INCDIR}" ; then
   echo "Cannot find parser.h. Set the value of the environment variable"
   echo "    LIBXML_INCDIR"
   echo "to point to where it can be found."
   exit 1;
  else
   echo "Located parser file ${LIBXML_INCDIR}/parser.h"
  fi


  if test -z "${LIBXML2}" ; then
CPPFLAGS="${PKG_CPPFLAGS} -I${LIBXML_INCDIR}"
echo "${CPPFLAGS}"
  AC_TRY_COMPILE([
#ifdef FROM_GNOME_XML_DIR
#include <gnome-xml/parser.h>
#else
#include <libxml/parser.h>
#endif],
[ xmlAttr *attr;
   attr->val = NULL;
], [echo "Using libxml 1.8.*!"],[LIBXML2="-DLIBXML2=1"; echo "Using libxml2.*" ])
  fi

#  AC_EGREP_HEADER(xmlParseFile, ${LIBXML_INCDIR}parser.h,
#	HAVE_LIBXML_HEADER=true,
#	AC_MSG_ERROR("header files for libxml seem to be incorrect"))


  AC_CHECK_LIB(z, gzopen)
  AC_CHECK_LIB(xml, xmlParseFile,, AC_MSG_ERROR("libxml not found"), "-L${LIBXML_LIBDIR-.}")

  if test -n "${LIBXML_LIBDIR}" ; then
     LIBS="${LIBS} -L${LIBXML_LIBDIR-.}"
     LD_PATH="${LIBXML_LIBDIR-.}"
  fi

  PKG_CPPFLAGS="${PKG_CPPFLAGS} -DLIBXML"
  if test -z "${FROM_GNOME_XML_DIR}" ; then
   PKG_CPPFLAGS="${PKG_CPPFLAGS} -I${LIBXML_INCDIR-.}"
  fi


if test -z "${LIBXML2}" ; then
 dnl Now we try to test whether we have a really old libxml
 dnl which uses childs and root instead of xmlChildren and xmlRootNode

 if test -z "${USE_OLD_ROOT_CHILD_NAMES}" ; then
  CPPFLAGS=${PKG_CPPFLAGS}
  AC_TRY_COMPILE([
#ifdef FROM_GNOME_XML_DIR
#include <gnome-xml/parser.h>
#else
#include <libxml/parser.h>
#endif],
[ xmlDocPtr node;
   node->xmlRootNode = NULL;
], [echo "New style libxml!"],[USE_OLD_ROOT_CHILD_NAMES=1; echo "Need to use old-style libxml names"])

echo "Using old root child names? ${USE_OLD_ROOT_CHILD_NAMES-0}" 
 fi  # USE_OLD_ROOT_CHILD_NAMES
else
 CPPFLAGS=${PKG_CPPFLAGS}
AC_TRY_RUN([
#ifdef FROM_GNOME_XML_DIR
#include <gnome-xml/parser.h>
#else
#include <libxml/parser.h>
#endif
int 
main(int argc, char *argv)
{
  xmlCheckVersion(20000);
return(0);
}
],[ LIBXML2_OK=1],[LIBXML2_OK=0])

 if test "${LIBXML2_OK}" = "0" ; then 
    echo "You are trying to use a version 2.* edition of libxml"
    echo "but an incompatible library. The header files and library seem to be"
    echo "mismatched. If you have specified LIBXML_INCDIR, make certain to also"
    echo "specify an appropriate LIBXML_LIBDIR if the libxml2 library is not in the default"
    echo "directories."
    exit 1
 fi
fi

  if test -n "${USE_OLD_ROOT_CHILD_NAMES}" ; then
   PKG_CPPFLAGS="${PKG_CPPFLAGS} -DUSE_OLD_ROOT_CHILD_NAMES=1"
  fi
fi

if test -n "${USE_EXPAT}" ; then
  AC_CHECK_HEADER(xmltok/xmlparse.h, XMLPARSE_INCDIR="xmltok/")
  if test -z "${XMLPARSE_INCDIR}" ; then 
    AC_CHECK_HEADER(xmlparse/xmlparse.h, XMLPARSE_INCDIR="xmlparse/")
  fi
  AC_EGREP_HEADER(XML_Parse, ${XMLPARSE_INCDIR}xmlparse.h,
	HAVE_EXPAT_HEADER=true,
	AC_MSG_ERROR("header file xmlparse.h seems to be incorrect"))	
  AC_CHECK_LIB(xmltok, XmlInitEncoding,,AC_MSG_ERROR("libxmltok not found"))
  AC_CHECK_LIB(xmlparse, XML_Parse,,
		AC_MSG_ERROR("libxmlparse not found"), -lxmltok)
  PKG_CPPFLAGS="${PKG_CPPFLAGS} -DLIBEXPAT -I${XMLPARSE_INCDIR}"
  LD_PATH="${LD_PATH}:${LIBXML_LIBDIR}"
fi


if test -n "${USE_EXPAT}" ; then
  SUPPORTS_EXPAT="TRUE"
else
  SUPPORTS_EXPAT="FALSE"
fi

echo "Expat: ${USE_EXPAT} ${SUPPORTS_EXPAT}"

if test -n "${USE_LIBXML}" ; then
  SUPPORTS_LIBXML="TRUE"
else
  SUPPORTS_LIBXML="FALSE"
fi

PKG_LIBS=${LIBS}

AC_SUBST(LIBXML2)

AC_SUBST(LIBXML_INCDIR)
AC_SUBST(XMLPARSE_INCDIR)
AC_SUBST(PKG_LIBS)
AC_SUBST(PKG_CPPFLAGS)

AC_SUBST(SUPPORTS_LIBXML)
AC_SUBST(SUPPORTS_EXPAT)

AC_SUBST(LD_PATH)

AC_OUTPUT(cleanup src/Makevars R/supports.R inst/scripts/RSXML.csh inst/scripts/RSXML.bsh)
chmod +x cleanup


