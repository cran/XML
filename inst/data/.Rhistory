version
x <- function() { y <- 1
browser()
}
x()
askdl
library(XML)
x()
x()
adasd
library(StatDataML)
options(warn=2)
options(error=quote(browser()))
d <- list(a = c("S","AS", "Q"))
writeDfSDML(d)
asdasdas
ada
seq(1, by=2, n = 3)
seq(1, by=2, length = 3)
source("RS.S")
v <- xmlRoot(xmlTreeParse("longitudinalData.xml", handlers=list(integer=RSinteger, double=RSdouble, logical = RSlogical, string = RSstring, array =RSaray, namedlist = RSnamedlist, logitudinal = RSlongitudinal , object = RSobject)))
v <- xmlRoot(xmlTreeParse("longitudinalData.xml", handlers=list(integer=RSinteger, double=RSdouble, logical = RSlogical, string = RSstring, array =RSarray, namedlist = RSnamedlist, logitudinal = RSlongitudinal , object = RSobject)))
v <- xmlRoot(xmlTreeParse("longitudinalData.xml", handlers=list(integer=RSinteger, double=RSdouble, logical = RSlogical, string = RSstring, array =RSArray, namedlist = RSnamedlist, logitudinal = RSlongitudinal , object = RSobject)))
v <- xmlRoot(xmlTreeParse("longitudinalData.xml", handlers=list(integer=RSinteger, double=RSdouble, logical = RSlogical, string = RSstring, array =RSArray, namedlist = RSnamedList, logitudinal = RSlongitudinal , object = RSobject)))
v <- xmlRoot(xmlTreeParse("longitudinalData.xml", handlers=list(integer=RSinteger, double=RSdouble, logical = RSlogical, string = RSstring, array =RSArray, namedlist = RSnamedList, logitudinal = RSlongitudinal , object = RSobject), asTree=T))
v
v[[1]]
class(v[[1]])
source("RS.S")
v <- xmlRoot(xmlTreeParse("longitudinalData.xml", handlers=list(integer=RSinteger, double=RSdouble, logical = RSlogical, string = RSstring, array =RSArray, namedlist = RSnamedList, logitudinal = RSlongitudinal , object = RSobject), asTree=T))
v
v[[1]]
source("RS.S")
v <- xmlRoot(xmlTreeParse("longitudinalData.xml", handlers=list(integer=RSinteger, double=RSdouble, logical = RSlogical, string = RSstring, array =RSArray, namedlist = RSnamedList, logitudinal = RSlongitudinal , object = RSobject, list=RSlist), asTree=T))
v[[1]]
source("RS.S")
v <- xmlRoot(xmlTreeParse("longitudinalData.xml", handlers=list(integer=RSinteger, double=RSdouble, logical = RSlogical, string = RSstring, array =RSArray, namedlist = RSnamedList, logitudinal = RSlongitudinal , object = RSobject, list=RSlist), asTree=T))
v[[1]]
source("RS.S")
v <- xmlRoot(xmlTreeParse("longitudinalData.xml", handlers=list(integer=RSinteger, double=RSdouble, logical = RSlogical, string = RSstring, array =RSArray, namedlist = RSnamedList, logitudinal = RSlongitudinal , object = RSobject, list=RSlist), asTree=T))
v[[1]]
length(v)
names(v)
class(v)
xmlChildren(v)
length(xmlChildren(v))
class(xmlChildren(v))
v <- xmlRoot(xmlTreeParse("longitudinalData.xml", handlers=list(integer=RSinteger, double=RSdouble, logical = RSlogical, string = RSstring, array =RSArray, namedlist = RSnamedList, logitudinal = RSlongitudinal , object = RSobject, list=RSlist), asTree=T))
class(v)
xmlName(v)
xmlSize(v)
v[[1]]
names(v[[1]])
factor(c("a", "a", "b", "a"))
unclass(factor(c("a", "a", "b", "a")))
?factor
as.logical("False")
as.logical(NULL)
source("RS.S")
objects(2)
objects(3)
 dtd <- parseDTD("RS.dtd")
 dtd <- parseDTD("RS.dtd")
 dtd <- parseDTD("RS.dtd")
 dtd <- parseDTD("RS.dtd")
 dtd <- parseDTD("RS.dtd")
options(error = NULL)
 dtd <- parseDTD("RS.dtd")
 dtd <- parseDTD("RS.dtd")
options(warn=0)
options(warn=1)
 dtd <- parseDTD("RS.dtd")
options(warn=0)
 dtd <- parseDTD("RS.dtd")
 dtd <- parseDTD("RS.dtd")
 dtd <- parseDTD("RS.dtd")
 dtd <- parseDTD("RS.dtd")
 dtd <- parseDTD("RS.dtd")
v <- xmlRoot(xmlTreeParse("longitudinalData.xml", handlers=list(integer=RSinteger, double=RSdouble, logical = RSlogical, string = RSstring, array =RSArray, namedlist = RSnamedList, logitudinal = RSlongitudinal , object = RSobject, list=RSlist), asTree=T))
v
v[[1]]
class(v[[1]])
class(v)
v$namespace
v <- xmlRoot(xmlTreeParse("longitudinalData.xml", handlers=list(integer=RSinteger, double=RSdouble, logical = RSlogical, string = RSstring, array =RSArray, anamedlist = RSnamedList, logitudinal = RSlongitudinal , object = RSobject, list=RSlist), asTree=T))
v[[1]]
v[[1]]$namespace
v <- xmlRoot(xmlTreeParse("longitudinalData.xml", handlers=list(integer=RSinteger, double=RSdouble, logical = RSlogical, string = RSstring, array =RSArray, anamedlist = RSnamedList, logitudinal = RSlongitudinal , object = RSobject, list=RSlist), asTree=T))
v$namespace
objects(3)
xmlNamespace(v)
RSxmlScan("longitudinalData.xml")
source("RS.S")
RSxmlScan("longitudinalData.xml")
source("RS.S")
RSxmlScan("longitudinalData.xml")
source("RS.S")
RSxmlScan("longitudinalData.xml")
source("RS.S")
RSxmlScan("longitudinalData.xml")
options(error=quote(browser()))
RSxmlScan("longitudinalData.xml")
where
options(error=quote(browser()))
source("RS.S")
RSxmlScan("longitudinalData.xml")
d <- RSxmlScan("longitudinalData.xml")
d[[1]]$Y
class(d[[1]]$Y)
source("RS.S")
d <- RSxmlScan("longitudinalData.xml")
class(d)
source("RS.S")
d <- RSxmlScan("longitudinalData.xml")
d <- RSxmlScan("longitudinalData.xml")
where
source("RS.S")
d <- RSxmlScan("longitudinalData.xml")
source("RS.S")
d <- RSxmlScan("longitudinalData.xml")
source("RS.S")
d <- RSxmlScan("longitudinalData.xml")
source("RS.S")
d <- RSxmlScan("longitudinalData.xml")
source("RS.S")
d <- RSxmlScan("longitudinalData.xml")
source("RS.S")
d <- RSxmlScan("longitudinalData.xml")
where
source("RS.S")
d <- RSxmlScan("longitudinalData.xml", longitudinal = RSlongitudinal)
getRSXMLHandlers(longitudinal = RSlongitudinal)
names(getRSXMLHandlers(longitudinal = RSlongitudinal))
names(getRSXMLHandlers(longitudinal = RSlongitudinal))
source("RS.S")
names(getRSXMLHandlers(longitudinal = RSlongitudinal))
d <- RSxmlScan("longitudinalData.xml", longitudinal = RSlongitudinal)
source("RS.S")
read
formals(exists)
source("RS.S")
d <- RSxmlScan("longitudinalData.xml", longitudinal = RSlongitudinal)
q
readXML.longitudinal <- RSlongitudinal
d <- RSxmlScan("longitudinalData.xml")
source("RS.S")
d <- RSxmlScan("longitudinalData.xml")
source("../examples/xmlOutputBuffer.R")
save.image()
objects(3)
source("writeRS.S")
con <- xmlOutputBuffer()
list(1:10, letters[1:3])
v <- list(1:10, letters[1:3])
save.image()
writeXML(v, con)
class(v)
typeof(v)
typeof(v[[2]])
primitive
is.primitive
mode(v[[2]])
mode(logical(1))
mode(numeric(1))
mode(integer(1))
?sapply
source("writeRS.S")
source("writeRS.S")
writeXML(v, con)
source("writeRS.S")
writeXML(v, con)
where
f
source("writeRS.S")
writeXML(v, con)
source("writeRS.S")
writeXML(v, con)
source("writeRS.S")
writeXML(v, con)
source("writeRS.S")
writeXML(v, con)
source("writeRS.S")
writeXML(v, con)
con <- xmlOutputBuffer()
source("writeRS.S")
writeXML(v, con)
con$value()
v
source("writeRS.S")
source("../examples/xmlOutputBuffer.R")
con <- xmlOutputBuffer()
writeXML(v, con)
con$value()
con$reset()
con$value()
source("../examples/xmlOutputBuffer.R")
writeXML(v, con)
con$value()
paste("length", 2, sep="=")
paste("length", paste("\"", 2,"\""), sep="=")
paste("length", paste("\"", 2,"\"", sep=""), sep="=")
con <- xmlOutputBuffer()
writeXML(v, con)
con$value()
con$value()
source("writeRS.S")
source("writeRS.S")
con$reset()
writeXML(v, con)
v$value()
con$value()
source("writeRS.S")
con$reset(); writeXML(v, con); con$value()
source("writeRS.S")
con$reset(); writeXML(v, con); con$value()
source("writeRS.S")
con$reset(); writeXML(v, con); con$value()
source("writeRS.S")
con$reset(); writeXML(v, con); con$value()
match(mode(v[[2]], c("integer", "numeric", "character", "logical")))
n
v[[2]]
match(mode(v[[2]]), c("integer", "numeric", "character", "logical"))
source("writeRS.S")
con$reset(); writeXML(v, con); con$value()
writeXML.character
rm(writeXML.character)
save.image()
source("writeRS.S")
con$reset(); writeXML(v, con); con$value()
source("writeRS.S")
l <- list(times=as.integer(c(1,4)), cov=c(23.4, 45.6))
class(l) <- "lgtdl"
con$reset(); writeXML(l, con); con$value()
source("writeRS.S")
con$reset(); writeXML(l, con); con$value()
l
source("writeRS.S")
con$reset(); writeXML(l, con); con$value()
q()
source("writeRS.S")
con$reset(); writeXML(l, con); con$value()
class(l) <- c(class(l), "duncan")
con$reset(); writeXML(l, con); con$value()
class(l)
source("writeRS.S")
con$reset(); writeXML(l, con); con$value()
length(class(l))
source("writeRS.S")
con$reset(); writeXML(l, con); con$value()
source("writeRS.S")
con$reset(); writeXML(l, con); con$value()
class(l) <- "lgtdl"
con$reset(); writeXML(l, con); con$value()
writeRS
formals(writeXML)
source("writeRS.S")
source("writeRS.S")
con$reset(); writeXML(writeXML, con); con$value()
source("writeRS.S")
con$reset(); writeXML(writeXML, con); con$value()
source("writeRS.S")
con$reset(); writeXML(writeXML, con); con$value()
rm(writeRS.closure, writerRS.function)
rm(writeRS.closure, writeRS.function)
rm(writeRS.function)
save.image()
source("writeRS.S")
con$reset(); writeXML(writeXML, con); con$value()
source("writeRS.S")
con$reset(); writeXML(writeXML, con); con$value()
source("writeRS.S")
con$reset(); writeXML(writeXML, con); con$value()
body(writeRS)
body(writeXML)
mode(body(writeXML))
for(i in body(writeXML)) print(i)
 
q
0
q
q)
q)(
q()
?browser
Q
length(body(writeXML)
)
typeof(body(writeXML))
b <-(body(writeXML))
b
b[[1]]
b[[2]]
mode(b[[1]])
mode(b[[2]])
quote(if(x) 1 else 2)
k <-quote(if(x) 1 else 2)
class(k)
typeof(k)
mode(k)
k[[1]]
mode(k[[1]])
typeof(k[[1]])
k[[1]]
k[[1]][[1]]
k[[1]]
mode(k[[1]])
mode(b[[1]])
typeof(b[[1]])
k[[1]] == "if"
length(k)
k[[2]]
k <-quote(if(x) 1 else if(T) 2 else 4)
length(k)
k[[2]]
foo <- function(x= 10, b="asd") { if(x) 1 else if(T) 2 else 4}
save.image()
source("writeRS.S")
source("writeRS.S")
writeXML(foo)
where
con$reset(); writeXML(writeXML, con); con$value()
con$reset(); writeXML(foo, con); con$value()
body(foo)
typeof(body(foo))
typeof(body(foo)[[1]])
body(foo)[[1]]
length(body(foo))
source("writeRS.S")
con$reset(); writeXML(foo, con); con$value()
source("writeRS.S")
con$reset(); writeXML(foo, con); con$value()
body(writeXML)[[2]]
typeof(body(writeXML)[[2]])
mode(body(writeXML)[[2]])
m <- (body(writeXML)[[2]])
m[[1]]
n <- quote(f()(1,foo(2)))
mode(n)
n[[1]]
mode(n[[1]])
m
m[[1]]
n[[2]]
n[[3]]
source("writeRS.S")
source("writeRS.S")
con$reset(); writeXML(writeXML, con); con$value()
con$reset(); writeXML(writeXML, con); con$value()
where
seq(2, 1)
source("writeRS.S")
con$reset(); writeXML(writeXML, con); con$value()
m
m[-1]
source("writeRS.S")
con$reset(); writeXML(writeXML, con); con$value()
where
m
m[2]
m[[2]]
source("writeRS.S")
con$reset(); writeXML(writeXML, con); con$value()
q <- quote(for(i in c(1,2,3)) { print(i)})
mode(q)
q[[1]]
typeof(q)
q[[2]]
typeof(q[[2]])
q[[3]]
q[[4]]
typeof(q[[4]])
bar
quote(return(1))
r <- quote(return(1))
typeof(r)
r[[1]]
source("writeExamples.S")
save.image()
con$reset(); writeXML(foo, con); con$value()
con$reset(); writeXML(bar, con); con$value()
length(body(foo))
source("writeRS.S")
con$reset(); writeXML(bar, con); con$value()
con$reset(); writeXML(foo, con); con$value()
body(bar)[[2]]
body(bar)[[1]]
body(bar)[[3]]
body(foo)[[1]]
source("../examples/writeExamples.S")
length(body(single))
source("writeRS.S")
source("writeRS.S")
con$reset(); writeXML(foo, con); con$value()
con$reset(); writeXML(single, con); con$value()
body(single)
source("writeRS.S")
body(single)
con$reset(); writeXML(single, con); con$value()
xmlTreeParse(con$value(), asText=T)
source("writeRS.S")
con$reset(); writeXML(single, con); con$value()
xmlTreeParse(con$value(), asText=T)
xmlRoot(xmlTreeParse(con$value(), asText=T))
xmlRoot(xmlTreeParse(con$value(), asText=T))
con$reset(); writeXML(bar, con); con$value()
xmlRoot(xmlTreeParse(con$value(), asText=T))
while
())
q <- quote(while(T) { 1} )
q[[1]]
typeof(q)
q[[1]]
source("writeRS.S")
source("../examples/writeExamples.S")
con$reset(); writeXML(writeXML, con); con$value()
con$reset(); writeXML(While, con); con$value()
xmlRoot(xmlTreeParse(con$value(), asText=T))
source("writeRS.S")
con$reset(); writeXML(While, con); con$value()
xmlRoot(xmlTreeParse(con$value(), asText=T))
con$reset(); writeXML(bar, con); con$value()
xmlRoot(xmlTreeParse(con$value(), asText=T))
quote(break)
q <- quote(break)
typeof(q)
q[[1]]
source("../examples/writeExamples.S")
con$reset(); writeXML(While, con); con$value()
source("writeRS.S")
con$reset(); writeXML(While, con); con$value()
While
body(While)[[2]]
body(While)[[2]][[1]]
body(While)[[2]][[2]]
body(While)[[2]][[3]]
typeof(body(While)[[2]][[3]])
source("writeRS.S")
con$reset(); writeXML(While, con); con$value()
?repeat
?"repeat"
?"repeat"
 
source("writeRS.S")
source("writeRS.S")
source("../examples/writeExamples.S")
con$reset(); writeXML(While, con); con$value()
source("writeRS.S")
con$reset(); writeXML(While, con); con$value()
q <- quote(x <- 1)
q[[1]]
mode(q[[1]])
source("writeRS.S")
source("writeRS.S")
con$reset(); writeXML(While, con); con$value()
q <- quote( x && 1 || T)
q[[1]]
source("../examples/writeExamples.S")
con$reset(); writeXML(Logic, con); con$value()
xmlRoot(xmlTreeParse(con$value(), asText=T))
source("writeRS.S")
con$reset(); writeXML(Logic, con); con$value()
source("writeRS.S")
con$reset(); writeXML(Logic, con); con$value()
where
x
source("writeRS.S")
con$reset(); writeXML(Logic, con); con$value()
con$reset(); writeXML(writeXML, con); con$value()
con$reset(); writeXML(Logic, con); con$value()
source("writeRS.S")
con$reset(); writeXML(Logic, con); con$value()
source("writeRS.S")
con$reset(); writeXML(Logic, con); con$value()
source("writeRS.S")
con$reset(); writeXML(Logic, con); con$value()
source("writeRS.S")
con$reset(); writeXML(Logic, con); con$value()
source("writeRS.S")
con$reset(); writeXML(Logic, con); con$value()
source("writeRS.S")
con$reset(); writeXML(Logic, con); con$value()
source("writeRS.S")
con$reset(); writeXML(Logic, con); con$value()
xmlRoot(xmlTreeParse(con$value(), asText=T))
con$reset(); writeXML(Logic, con); con$value()
xmlRoot(xmlTreeParse(con$value(), asText=T))
con$reset(); writeXML(writeXML, con); con$value()
source("writeRS.S")
con$reset(); writeXML(writeXML, con); con$value()
con$reset(); writeXML(writeXML, con); con$value()
con$reset(); writeXML(Logic, con); con$value()
x
source("writeRS.S")
con$reset(); writeXML(Logic, con); con$value()
x
x[[1]]
Logic
con$reset(); writeXML(Logic, con); con$value()
x
Logic
q()
